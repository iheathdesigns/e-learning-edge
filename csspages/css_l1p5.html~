<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>CSS Lesson 1 Page 5</title>
<link href="../css/styles.css" rel="stylesheet" type="text/css" />
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
<script type="text/javascript">

  
	



var messageDelay = 2000;  // How long to display status messages (in milliseconds)

// Init the form once the document is ready
$( init );


// Initialize the form

function init() {

  // Hide the form initially.
  // Make submitForm() the form's submit handler.
  // Position the form so it sits in the centre of the browser window.
  $('#contactForm').hide().submit( submitForm ).addClass( 'positioned' );
	
	
		
		
  // When the "contact" link is clicked:
  // 1. Fade the content out
  // 2. Display the form
  // 3. Move focus to the first field
  // 4. Prevent the link being followed

  $('a[href="#contactForm"]').click( function() {
    $('#container').fadeTo( 'slow', .2 );
    $('#contactForm').fadeIn( 'slow', function() {
      $('#senderName').focus();
    } )

    return false;
  } );
  
 
  // When the "Cancel" button is clicked, close the form
  $('#cancel').click( function() { 
    $('#contactForm').fadeOut();
    $('#container').fadeTo( 'slow', 1 );
  } );  

  // When the "Escape" key is pressed, close the form
  $('#contactForm').keydown( function( event ) {
    if ( event.which == 27 ) {
      $('#contactForm').fadeOut();
      $('#container').fadeTo( 'slow', 1 );
    }
  } );

}



// Submit the form via Ajax

function submitForm() {
  var contactForm = $(this);

  // Are all the fields filled in?

  if ( !$('#senderName').val() || !$('#senderEmail').val() || !$('#message').val() ) {

    // No; display a warning message and return to the form
    $('#incompleteMessage').fadeIn().delay(messageDelay).fadeOut();
    contactForm.fadeOut().delay(messageDelay).fadeIn();

  } else {

    // Yes; submit the form to the PHP script via Ajax

    $('#sendingMessage').fadeIn();
    contactForm.fadeOut();

    $.ajax( {
      url: contactForm.attr( 'action' ) + "?ajax=true",
      type: contactForm.attr( 'method' ),
      data: contactForm.serialize(),
      success: submitFinished
    } );
  }

  // Prevent the default form submission occurring
  return false;
}


// Handle the Ajax response

function submitFinished( response ) {
  response = $.trim( response );
  $('#sendingMessage').fadeOut();

  if ( response == "success" ) {

    // Form submitted successfully:
    // 1. Display the success message
    // 2. Clear the form fields
    // 3. Fade the content back in

    $('#successMessage').fadeIn().delay(messageDelay).fadeOut();
    $('#senderName').val( "" );
    $('#senderEmail').val( "" );
    $('#message').val( "" );

    $('#container').delay(messageDelay+500).fadeTo( 'slow', 1 );

  } else {

    // Form submission failed: Display the failure message,
    // then redisplay the form
    $('#failureMessage').fadeIn().delay(messageDelay).fadeOut();
    $('#contactForm').delay(messageDelay+500).fadeIn();
  }
}
 

</script>
<script type="text/javascript">

function show_alert(){alert("404 ERROR Page Unavailable");}
</script>
</head>

<body>
<div id="container">
<div id="header"></div>

<div id="nav1">

<ul>
	<li><a href="#">Home</a></li>
    <li><a href="#" onclick="show_alert()">XHTML</a></li>
    <li><a href="#">CSS</a></li>
    <li><a href="#" onclick="show_alert()">DHTML</a></li>
    <li><a href="#" onclick="show_alert()">Flash</a></li>
    <li><a href="#">JavaScript</a></li>
    <li><a href="#" onclick="show_alert()">AdvHTML</a></li>
    <li><a href="#" onclick="show_alert()">FAQ</a></li>
    <li><a href="#contactForm">Contact</a></li>
</ul>




</div>

<div id="sidebar">
<div id="nav2">

<ul>
      	<li><a href="#">Overview</a></li>
        <li><a href="#">Page 1</a></li>
        <li><a href="#">Page 2</a></li>
        <li><a href="#">Page 3</a></li>
        <li><a href="#">Page 4</a></li>
        <li><a href="#">Page 5</a></li>
        <li><a href="#">Page 6</a></li>
        <li><a href="#">Page 7</a></li>
        <li><a href="#">Page 8</a></li>
      </ul>



</div>



</div>

<div id="body_content">
<h1>Lesson 1 Page 5</h1>
<p>We've covered all the basics of CSS syntax. Now let's
        go over a few more tricks and shortcuts that you'll be glad to know about.
        </p>
      <p><strong>Classes</strong> </p>
      <p>We said before that any HTML tag can serve as a selector and have
        stylesheets declarations attached to it. But what if you want something
        more complex
        than that? What if, for example, you wanted body text to be green for
        the first paragraph, purple for the second paragraph, and gray for the
        third? </p>
      <p>That's where classes come in. You could create three different classes
        of <tt>P</tt>, each one with a different stylesheet declaration. The
        rules (either embedded in the HTML document or in an external stylesheets
        file)
        would
        look like this: </p>      <p class="code">P.first { color: green }<br />
        P.second { color: purple }<br />
        P.third { color: gray } </p>
      <p>And your HTML code would look like this: </p>
      <p class="code">&lt;
        P CLASS=&quot;first&quot;&gt;The first paragraph, with a class name of &quot;first.&quot;&lt;/P&gt;<br />
&lt;
        P CLASS=&quot;second&quot;&gt;The second paragraph, with a class name of &quot;second.&quot;&lt;/P&gt;<br />
&lt;
        P CLASS=&quot;third&quot;&gt;The third paragraph, with a class name of &quot;third.&quot;&lt;/P&gt; </p>
      <p>You
        can name classes anything you want, but make sure to use a period before
        the class name in the stylesheets rule. </p>      <p>You can also create classes that
        aren't attached to any HTML tag at all:</p>
      <p class="code">.first { color: green } </p>      <p>This approach is more flexible, because now we
        can use <p class="code">CLASS=&quot;first&quot;</p> with
        any HTML tag in the <p class="code">&lt;BODY&gt;</p> of the page, and the text will be displayed
        in green. </p>      <p><strong>Contextual Selectors</strong> </p>
      <p>Let's say you want all bold text to be red but only
        if that bold text occurs in regular &lt;P&gt; body text. It's not possible,
        right? Wrong. With stylesheets, even your wildest dreams can come true
        (OK, maybe I'm exaggerating slightly).
        Contextual selectors are selectors that demand that a certain situation
        be true in order for their declarations to be carried out. </p>
      <p class="code">P B { color: red }</p>      <p class="code"> &lt;
        H1&gt;&lt;B&gt;Emma Thompson&lt;/B&gt;, Actress&lt;/H1&gt;<br />
&lt;
        P&gt;Dramatic actor, inspired writer, down-to-earth comedienne. Is there &lt;B&gt;nothing&lt;/B&gt; she
        can't do?&lt;/P&gt; </p>
      <p>The stylesheets rule tells the browser to make all
        bold text red only if it appears within &lt;P&gt; text. Thus, when the
        above HTML code is displayed by the browser, the bold text in the first
        line isn't red, but the bold
        text in the second line is. </p>      <p><strong>Comments </strong></p>
      <p>Even with the clean code that's created with stylesheets, commenting
        your work is a good idea. Fortunately, comments are possible within stylesheets
        code and can be used on any line, like so: </p>
      <p class="code">P.first { color: green } /* green for the first paragraph of every page
        */<br />
        H1 { text-indent: 10px; font-family: verdana }<br />
        IMG { margin-top: 100px } /* give all images a top margin */ </p>
</div></div>
<div id="footer">&copy;Ian Heath 2012. All Rights Reserved.</div>
</body>
</html>
